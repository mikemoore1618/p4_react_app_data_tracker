- use jest snapshots: https://facebook.github.io/jest/docs/snapshot-testing.html

- rewrite all tests for graphic renderers to exclude Chart component
    (just use layerWidth, layerHeight, faked scaleX, scaleY, etc)

- documentation
    - check grammar
    - add descriptions for all props
    - improve docs about Ticks (tick=line+label, lineOffset+lineLength)
    - enlarge examples

- add "react-stockcharts" into similar projects

- integrate semantic-release
https://egghead.io/lessons/javascript-how-to-write-a-javascript-library-automating-releases-with-semantic-release

- idea: radial gradient for pie - just line with gradient
http://codepen.io/sdras/embed/8c38ae4121eae5b6dc035e19c48b35b4/
http://jsfiddle.net/Wexcode/CrDUy/

- Describe how it can work with textures.js:
https://github.com/riccardoscalco/textures

in issues:

- add delay property to Animate component
https://github.com/rumble-charts/rumble-charts/issues/4

- support React ART and/or react-konva (https://github.com/lavrton/react-konva)
https://github.com/rumble-charts/rumble-charts/issues/5

- support react native svg
https://github.com/react-native-community/react-native-svg


- morphing (shape animation):
  https://github.com/veltman/flubber
  https://github.com/AlloyTeam/pasition


(add next list as a separated github issues)

- make tests for saucelabs.com
    - run unit tests in browsers
    -

- new components
    Graphics:
    - Geo
    - Candlesticks
    - RadialAxis (for radar charts)
        - consider to make some wrapper (or transformation method) to prepare polar coordinates system
    - Bars3d, Areas3d, Pies3d etc (emulate 3d for some graphics components)
    - EdgePoints (i.e. http://rrag.github.io/react-stockcharts/documentation.html#/edge_coordinate)
    -
    Interactivity:
    - Tooltip (using div)
    - Legend (using div)
    - Locator (to show vertical and horizontal lines following the mouse pointer)
    - Zoom
    - Navigator/(for time-series data)
    Number of ready-to-use charts:
    - Line/Bar/PieChart
    - Histogram/ScatterPlot/etc
    - stock charts

- relative width and height for the whole charts (now only pixels are suppoted)
    - maybe it should be a new <ResponsiveChart> that will listen parent/window sizes changes

- (???) optimize number of generated elements (virtual dom and dom)
    - it's only depends on how shape/type transformation will be implemented (Pies <=> Bars)
    but it looks it's not a problem (i.e. Bars and Lines don't correlate each other in dom)

- (???) "hover" sub style/attributes (i.e. barStyle={{fill:'red',hover:{fill:'green'}}})

- (???) consider to use react context instead of cloning children

- find a way to connect many different charts to each other
    - i.e. there are you charts - geographical map and bar chart showing population per age
    - user clicks on some country, bar chart automatically updates to show population per age just
        for that country
    - user clicks on some bar, map automatically update to show how much each country has population
        on the selected age

- what about data grouping?
    - it should be transformation

- how to be with breaks in <Lines>, now it draws a line between points (1 and 3 in case of 2 is missing)

- think how to skip `g` tag on <Transform> component
    - solution: <Transform> can use children as a function

- make `key` attributes configurable (now it's just seriesIndex/pointIndex)
    - seriesKey: React.PropTypes.func
    - pointKey: React.PropTypes.func

- rename bar/pie/dot/labelV.A.S. attributes to pointV.A.S. in order to unify API

- add property to <Animate> component to have zeros from the start
    - just to have nice initial animation when data appear for the first time

- improve Ticks to make it more flexible:
    - predefined ticks generators
    - capability to have more control on where ticks start, distance between etc

- enhance <Pies>
    - <RadialLabels> in right (and customizable) places
    - capability to move any pie on radial axis (farther from the center or closer)
    - render padAngle better (or find a way to have
    - pie with y=0 and padAngle>0 shows small pie, but shouldn't to (it seems it got negative value)
    - innerRadius='1%' renders very strange (it's actually looks like innerRadius=90%)

- queued animations
    - idea: add some property to Animate that will say to the component that new `series`
    should be added to the queue, not change the animation/transition target.
    - also a series can have some attribute that will say to <Animate> component
    to queue animations on that specific series

- line/path animations
    - idea: add some property to Animate to have line animations (using css)
    - add interpolation=none to disable interpolation, but make it possible to have line animations

- color/style zones for the same series (i.e. different colors for different ranges of the same line)


- learn more about using async calculations and rendering (for performance)
    (using web workers or something else))

- cover the case with server rendering (without jsdom)



- add domain for every helpers.colorFunc usage (now it returns an ordinal scale without domain)
    therefore if some series is skipped (seriesVisible=false) series' color is not skipped, but should be
    add domain fill fix that problem
    but don't forget colors property can be also just a simple function

- implement this example:
    http://codepen.io/xna2/pen/Dmqso
    http://codepen.io/rosko/pen/MepXap/
    http://flowingdata.com/2016/06/28/distributions-of-annual-income/

- sort propTypes

- now series.style applies to path element, is it ok? looks weird
    may be it should be applied to g element of series?

- review all react+d3 components (from my slides) to get interesting ideas regarding:
    - features
    - approaches

- update propTypes.series for every component specifically (i.e. "label" for Cloud)

- separated git-repos/npm-modules to emulate configs and appearance for different popular libes:
    - HighCharts/HighStock
    - Google Charts
    - etc

- move out <Cloud> into a separated repo/module

- add into README not just a list of similar projects, but comparison
(like here https://github.com/lavrton/react-konva)

- add into README - https://www.youtube.com/watch?v=v9Cn97vlvAU

https://www.youtube.com/watch?v=tS88bACG_k8
https://bl.ocks.org/mbostock/3943967


Similar projects:

Web:
- Standalone:
    - Highcharts
    - Google Charts
- React+D3:
    - D3 calculates, React renders:
        - (!!!) http://rrag.github.io/react-stockcharts/ (very similar to rumble-charts)

- https://github.com/uber/react-vis
- https://github.com/recharts/recharts


Mobile:
- Android:
    - Java: https://github.com/PhilJay/MPAndroidChart
    - RN: https://github.com/hongyin163/react-native-chart-android

- iOS:
    - Swift: https://github.com/danielgindi/Charts
    - RN: https://github.com/Jpadilla1/react-native-ios-charts


Logo:

const series = [{
    data: [1, 1, 1]
}, {
    data: [1, 1, 1]
}, {
    data: [1, 1, 1]
}];

<Chart width={480} height={480} series={series} minY={0}>
  <Transform method={['transpose', 'stack']}>
    <Pies
      combined={true}
      padAngle={0.025}
      cornerRadius={5}
      innerPadding='4%'
      innerRadius='33%'
    />
  </Transform>
</Chart>