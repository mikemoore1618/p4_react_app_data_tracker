'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _isPlainObject2 = require('lodash/isPlainObject');

var _isPlainObject3 = _interopRequireDefault(_isPlainObject2);

var _isString2 = require('lodash/isString');

var _isString3 = _interopRequireDefault(_isString2);

var _isNumber2 = require('lodash/isNumber');

var _isNumber3 = _interopRequireDefault(_isNumber2);

var _range2 = require('lodash/range');

var _range3 = _interopRequireDefault(_range2);

var _isUndefined2 = require('lodash/isUndefined');

var _isUndefined3 = _interopRequireDefault(_isUndefined2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _normalizeNumber = require('./helpers/normalizeNumber');

var _normalizeNumber2 = _interopRequireDefault(_normalizeNumber);

var _value = require('./helpers/value');

var _value2 = _interopRequireDefault(_value);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Renders ticks (labels and lines) for axis (x and y).
 *
 * @example ../docs/examples/Ticks.md
 */
var Ticks = function (_Component) {
    _inherits(Ticks, _Component);

    function Ticks(props) {
        _classCallCheck(this, Ticks);

        var _this = _possibleConstructorReturn(this, (Ticks.__proto__ || Object.getPrototypeOf(Ticks)).call(this, props));

        _this.generateTicks = _this.generateTicks.bind(_this);

        _this.renderTick = _this.renderTick.bind(_this);
        _this.renderLabel = _this.renderLabel.bind(_this);
        _this.renderLine = _this.renderLine.bind(_this);
        return _this;
    }

    // helpers

    _createClass(Ticks, [{
        key: 'generateTicks',
        value: function generateTicks(config) {
            var props = this.props;
            var axis = props.axis,
                maxX = props.maxX,
                maxY = props.maxY,
                minX = props.minX,
                minY = props.minY;
            var maxTicks = config.maxTicks,
                minDistance = config.minDistance,
                distance = config.distance;


            var max = axis === 'y' ? maxY : maxX;
            var min = axis === 'y' ? minY : minX;
            var length = max - min;

            if ((0, _isUndefined3.default)(minDistance)) {
                minDistance = Math.min(1, length);
            }

            if ((0, _isUndefined3.default)(maxTicks)) {
                maxTicks = Math.min((length + minDistance) / minDistance, 5);
            }

            if ((0, _isUndefined3.default)(distance)) {
                distance = Math.max(minDistance, length / maxTicks);
                distance = Math.ceil(distance / minDistance) * minDistance;
            }

            return (0, _range3.default)(min, max + minDistance, distance);
        }

        // render

    }, {
        key: 'renderTick',
        value: function renderTick(ticksLength, tick, index) {
            var props = this.props,
                x = this.x,
                y = this.y,
                position = this.position;
            var axis = props.axis,
                className = props.className,
                layerWidth = props.layerWidth,
                layerHeight = props.layerHeight,
                scaleX = props.scaleX,
                scaleY = props.scaleY;
            var tickStyle = props.tickStyle,
                tickAttributes = props.tickAttributes,
                tickVisible = props.tickVisible;


            if ((0, _isNumber3.default)(tick)) {
                tick = _defineProperty({}, axis, tick);
            }

            tickVisible = (0, _value2.default)(tickVisible, { index: index, ticksLength: ticksLength, tick: tick, props: props });

            if (!tickVisible) {
                return;
            }

            tickAttributes = (0, _value2.default)(tickAttributes, { index: index, ticksLength: ticksLength, tick: tick, props: props });
            tickStyle = (0, _value2.default)(tickStyle, { index: index, ticksLength: ticksLength, tick: tick, props: props });

            var pX = axis === 'x' ? x(tick.x) : (0, _normalizeNumber2.default)(position, layerWidth);
            var pY = axis === 'y' ? y(tick.y) : (0, _normalizeNumber2.default)(position, layerHeight);

            var transform = scaleX.swap || scaleY.swap ? 'translate(' + pY + ' ' + pX + ')' : 'translate(' + pX + ' ' + pY + ')';

            return _react2.default.createElement(
                'g',
                _extends({
                    key: index, style: tickStyle,
                    transform: transform,
                    className: className && className + '-tick ' + className + '-tick-' + index
                }, tickAttributes),
                this.renderLabel(ticksLength, tick, index),
                this.renderLine(ticksLength, tick, index)
            );
        }
    }, {
        key: 'renderLabel',
        value: function renderLabel(ticksLength, tick, index) {
            var props = this.props;
            var className = props.className,
                axis = props.axis;
            var labelStyle = props.labelStyle,
                labelFormat = props.labelFormat,
                labelVisible = props.labelVisible,
                labelAttributes = props.labelAttributes,
                label = props.label;


            labelVisible = (0, _value2.default)(labelVisible, { index: index, ticksLength: ticksLength, tick: tick, props: props });
            if (labelVisible) {

                labelAttributes = (0, _value2.default)([tick.labelAttributes, labelAttributes], { index: index, ticksLength: ticksLength, tick: tick, props: props });
                labelStyle = (0, _value2.default)([tick.labelStyle, labelStyle], { index: index, ticksLength: ticksLength, tick: tick, props: props });

                label = (0, _value2.default)([tick.label, label, tick[axis]], { index: index, ticksLength: ticksLength, tick: tick, props: props });

                if ((0, _isString3.default)(label) || (0, _isNumber3.default)(label)) {
                    return _react2.default.createElement(
                        'text',
                        _extends({
                            style: labelStyle,
                            className: className && className + '-label ' + className + '-label-' + index
                        }, labelAttributes),
                        (0, _value2.default)(labelFormat, label + '') || label
                    );
                } else {
                    return label;
                }
            }
        }
    }, {
        key: 'renderLine',
        value: function renderLine(ticksLength, tick, index) {
            var props = this.props,
                horizontal = this.horizontal;
            var layerWidth = props.layerWidth,
                layerHeight = props.layerHeight,
                className = props.className;
            var lineVisible = props.lineVisible,
                lineAttributes = props.lineAttributes,
                lineStyle = props.lineStyle,
                lineLength = props.lineLength,
                lineOffset = props.lineOffset;


            lineVisible = (0, _value2.default)(lineVisible, { index: index, ticksLength: ticksLength, tick: tick, props: props });

            if (!lineVisible) {
                return null;
            }

            lineAttributes = (0, _value2.default)([tick.lineAttributes, lineAttributes], { index: index, ticksLength: ticksLength, tick: tick, props: props });
            lineStyle = (0, _value2.default)([tick.lineStyle, lineStyle], { index: index, ticksLength: ticksLength, tick: tick, props: props });

            lineLength = (0, _normalizeNumber2.default)((0, _value2.default)([tick.lineLength, lineLength], { index: index, ticksLength: ticksLength, tick: tick, props: props }), horizontal ? layerWidth : layerHeight);
            lineOffset = (0, _normalizeNumber2.default)((0, _value2.default)([tick.lineOffset, lineOffset], { index: index, ticksLength: ticksLength, tick: tick, props: props }), horizontal ? layerWidth : layerHeight);

            var d = horizontal ? 'M' + lineOffset + ',0 h' + lineLength : 'M0,' + lineOffset + ' v' + lineLength;

            return _react2.default.createElement('path', _extends({
                style: lineStyle,
                className: className && className + '-line ' + className + '-line-' + index,
                d: d
            }, lineAttributes));
        }
    }, {
        key: 'render',
        value: function render() {
            var props = this.props;
            var className = props.className,
                position = props.position,
                scaleX = props.scaleX,
                scaleY = props.scaleY,
                axis = props.axis,
                style = props.style;
            var ticks = props.ticks;


            this.x = scaleX.factory(props);
            this.y = scaleY.factory(props);
            this.horizontal = axis === 'y' && !scaleX.swap && !scaleY.swap || axis === 'x' && (scaleX.swap || scaleY.swap);
            this.position = position || (axis === 'x' ? scaleX.swap || scaleY.swap ? 'top' : 'bottom' : 'left');

            ticks = (0, _value2.default)([ticks], props);
            if ((0, _isNumber3.default)(ticks)) {
                ticks = { maxTicks: ticks };
            }
            ticks = ticks || {};
            if ((0, _isPlainObject3.default)(ticks)) {
                ticks = this.generateTicks(ticks);
            }

            return _react2.default.createElement(
                'g',
                { className: className, style: style, opacity: props.opacity },
                (0, _map3.default)(ticks, this.renderTick.bind(this, ticks.length))
            );
        }
    }]);

    return Ticks;
}(_react.Component);

exports.default = Ticks;


Ticks.displayName = 'Ticks';

Ticks.propTypes = {
    style: _propTypes2.default.object,
    opacity: _propTypes2.default.number,
    className: _propTypes2.default.string,

    axis: _propTypes2.default.string,
    position: _propTypes2.default.string,

    tickVisible: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.func]),
    tickAttributes: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
    tickStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),

    label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node, _propTypes2.default.func]),
    labelVisible: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.func]),
    labelAttributes: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
    labelStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
    labelFormat: _propTypes2.default.func,

    lineVisible: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.func]),
    lineAttributes: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
    lineStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
    lineLength: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.func]),
    lineOffset: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.func]),

    ticks: _propTypes2.default.oneOfType([
    // ticks factory
    _propTypes2.default.func,
    // how many ticks to show
    _propTypes2.default.number,
    // settings
    _propTypes2.default.shape({
        maxTicks: _propTypes2.default.number,
        minDistance: _propTypes2.default.number,
        distance: _propTypes2.default.number
    }),
    // ticks themselves
    _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.shape({
        x: _propTypes2.default.number,
        y: _propTypes2.default.number,
        label: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string, _propTypes2.default.node]),
        labelStyle: _propTypes2.default.object,
        labelAttributes: _propTypes2.default.object,
        lineStyle: _propTypes2.default.object,
        lineAttributes: _propTypes2.default.object,
        lineLength: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
        lineOffset: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
    })]))]),

    scaleX: _propTypes2.default.object,
    scaleY: _propTypes2.default.object,
    layerWidth: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    layerHeight: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    minX: _propTypes2.default.number,
    maxX: _propTypes2.default.number,
    minY: _propTypes2.default.number,
    maxY: _propTypes2.default.number
};

Ticks.defaultProps = {
    axis: 'x',
    tickVisible: true,
    labelVisible: true,
    lineVisible: true,
    lineLength: 5,
    lineOffset: 0
};