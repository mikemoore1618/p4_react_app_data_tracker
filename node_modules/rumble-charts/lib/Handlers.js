'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _sortBy2 = require('lodash/sortBy');

var _sortBy3 = _interopRequireDefault(_sortBy2);

var _forEach2 = require('lodash/forEach');

var _forEach3 = _interopRequireDefault(_forEach2);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _proxyChildren = require('./helpers/proxyChildren');

var _proxyChildren2 = _interopRequireDefault(_proxyChildren);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Helps to use mouse events. For now supports only "`onClick`", "`onMouseMove`" and "`onMouseLeave`".
 *
 * This component will be improved and simplified in the future.
 *
 * @example ../docs/examples/Handlers.md
 */
var Handlers = function (_Component) {
    _inherits(Handlers, _Component);

    function Handlers(props) {
        _classCallCheck(this, Handlers);

        var _this = _possibleConstructorReturn(this, (Handlers.__proto__ || Object.getPrototypeOf(Handlers)).call(this, props));

        _this.updatePoint0 = _this.updatePoint0.bind(_this);
        _this.updateScales = _this.updateScales.bind(_this);

        _this.handleMouseEvent = _this.handleMouseEvent.bind(_this);
        _this.handleMouseMove = _this.handleMouseMove.bind(_this);
        _this.handleClick = _this.handleClick.bind(_this);
        return _this;
    }

    // helpers

    _createClass(Handlers, [{
        key: 'updatePoint0',
        value: function updatePoint0() {
            var rect = this.rect.getBoundingClientRect();
            this.left = rect.left;
            this.top = rect.top;
            this.width = rect.width;
            this.height = rect.height;
        }
    }, {
        key: 'updateScales',
        value: function updateScales() {
            var props = this.props;
            var scaleX = props.scaleX,
                scaleY = props.scaleY;

            this.x = scaleX.factory(props);
            this.y = scaleY.factory(props);
            this.scaleX = scaleX.factory(props);
            this.scaleY = scaleY.factory(props);

            var xDomain = this.x.domain();
            var xRange = this.x.range();
            this.x.domain(xRange);
            this.x.range(xDomain);

            var yDomain = this.y.domain();
            var yRange = this.y.range();
            this.y.domain(yRange);
            this.y.range(yDomain);

            this.ratio = Math.abs((this.y(1) - this.y(0)) / (this.x(1) - this.x(0)));
        }

        // handlers

    }, {
        key: 'handleMouseEvent',
        value: function handleMouseEvent(event, handler) {
            var _this2 = this;

            this.updatePoint0();

            var clientX = event.clientX,
                clientY = event.clientY;
            var left = this.left,
                top = this.top,
                props = this.props;
            var series = props.series,
                sensitivity = props.sensitivity,
                optimized = props.optimized,
                layerWidth = props.layerWidth,
                layerHeight = props.layerHeight;

            var realX = (clientX - left) * layerWidth / this.width;
            var realY = (clientY - top) * layerHeight / this.height;
            var x = this.x(realX);
            var y = this.y(realY);

            var closestPoints = [];
            var minDistance = sensitivity;
            (0, _forEach3.default)(series, function (series, seriesIndex) {
                (0, _forEach3.default)(series.data, function (point, pointIndex) {
                    var distance = void 0;
                    switch (props.distance) {
                        case 'x':
                            distance = Math.abs(point.x - x);
                            break;
                        case 'y':
                            distance = Math.abs(point.y - y);
                            break;
                        default:
                            distance = Math.sqrt(Math.pow(Math.abs(point.x - x) * (_this2.ratio || 1), 2) + Math.pow(Math.abs(point.y - y), 2));
                            break;
                    }

                    if (!optimized || distance <= minDistance) {
                        minDistance = distance;
                        closestPoints.push({
                            seriesIndex: seriesIndex,
                            pointIndex: pointIndex,
                            point: point,
                            distance: distance
                        });
                    }
                });
            });
            closestPoints = (0, _sortBy3.default)(closestPoints, 'distance');

            handler({
                clientX: realX,
                clientY: realY,
                scaleX: this.scaleX,
                scaleY: this.scaleY,
                x: x,
                y: y,
                closestPoints: closestPoints,
                originalEvent: event
            });
        }
    }, {
        key: 'handleMouseMove',
        value: function handleMouseMove(event) {
            this.handleMouseEvent(event, this.props.onMouseMove);
        }
    }, {
        key: 'handleClick',
        value: function handleClick(event) {
            this.handleMouseEvent(event, this.props.onClick);
        }

        // render

    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var props = this.props;
            var className = props.className,
                scaleX = props.scaleX,
                scaleY = props.scaleY,
                layerWidth = props.layerWidth,
                layerHeight = props.layerHeight;
            var onClick = props.onClick,
                onMouseMove = props.onMouseMove,
                onMouseLeave = props.onMouseLeave;


            this.updateScales();

            var children = (0, _proxyChildren2.default)(props.children, props, {
                layerWidth: layerWidth,
                layerHeight: layerHeight,
                scaleX: scaleX,
                scaleY: scaleY
            });

            return _react2.default.createElement(
                'g',
                {
                    className: className,
                    onClick: onClick && this.handleClick,
                    onMouseMove: onMouseMove && this.handleMouseMove,
                    onMouseLeave: onMouseLeave },
                _react2.default.createElement('rect', {
                    ref: function ref(_ref) {
                        return _this3.rect = _ref;
                    },
                    x: 0, y: 0, width: layerWidth, height: layerHeight,
                    fill: 'transparent', stroke: 'transparent' }),
                children
            );
        }
    }]);

    return Handlers;
}(_react.Component);

exports.default = Handlers;


Handlers.displayName = 'Handlers';

Handlers.propTypes = {
    className: _propTypes2.default.string,
    series: _propTypes2.default.array,
    sensitivity: _propTypes2.default.number,
    optimized: _propTypes2.default.bool,
    distance: _propTypes2.default.oneOf(['x', 'y']),
    onClick: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.bool]),
    onMouseMove: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.bool]),
    onMouseLeave: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.bool]),
    scaleX: _propTypes2.default.object,
    scaleY: _propTypes2.default.object,
    layerWidth: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    layerHeight: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
};

Handlers.defaultProps = {
    sensitivity: Infinity,
    optimized: true
};