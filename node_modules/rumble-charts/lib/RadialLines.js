'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _isNumber2 = require('lodash/isNumber');

var _isNumber3 = _interopRequireDefault(_isNumber2);

var _isString2 = require('lodash/isString');

var _isString3 = _interopRequireDefault(_isString2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _d3Scale = require('d3-scale');

var _d3Shape = require('d3-shape');

var _curves = require('./helpers/curves');

var _curves2 = _interopRequireDefault(_curves);

var _normalizeNumber = require('./helpers/normalizeNumber');

var _normalizeNumber2 = _interopRequireDefault(_normalizeNumber);

var _value = require('./helpers/value');

var _value2 = _interopRequireDefault(_value);

var _colorFunc = require('./helpers/colorFunc');

var _colorFunc2 = _interopRequireDefault(_colorFunc);

var _getCoords = require('./helpers/getCoords');

var _getCoords2 = _interopRequireDefault(_getCoords);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Renders radial lines for your radar chart
 *
 * @example ../docs/examples/RadialLines.md
 */
var RadialLines = function (_Component) {
    _inherits(RadialLines, _Component);

    function RadialLines(props) {
        _classCallCheck(this, RadialLines);

        var _this = _possibleConstructorReturn(this, (RadialLines.__proto__ || Object.getPrototypeOf(RadialLines)).call(this, props));

        _this.getInnerRadius = _this.getInnerRadius.bind(_this);
        return _this;
    }

    // helpers

    _createClass(RadialLines, [{
        key: 'getOuterRadius',
        value: function getOuterRadius(props) {
            return Math.min(props.layerWidth, props.layerHeight) / 2;
        }
    }, {
        key: 'getInnerRadius',
        value: function getInnerRadius(props) {
            return (0, _normalizeNumber2.default)(props.innerRadius, this.getOuterRadius(props));
        }
    }, {
        key: 'render',
        value: function render() {
            var props = this.props;
            var className = props.className,
                style = props.style,
                asAreas = props.asAreas,
                colors = props.colors,
                minX = props.minX,
                maxX = props.maxX,
                minY = props.minY,
                maxY = props.maxY,
                position = props.position,
                layerWidth = props.layerWidth,
                layerHeight = props.layerHeight,
                opacity = props.opacity;


            var innerRadius = this.getInnerRadius(props);
            var outerRadius = this.getOuterRadius(props);

            var radialScale = (0, _d3Scale.scaleLinear)().range([innerRadius, outerRadius]).domain(props.scaleY.direction >= 0 ? [minY, maxY] : [maxY, minY]);

            var circularScale = (0, _d3Scale.scaleLinear)().range([props.startAngle, props.endAngle]).domain(props.scaleX.direction >= 0 ? [minX - 0.5, maxX + 0.5] : [maxX + 0.5, minX - 0.5]);

            var series = props.series;


            var _radius0 = radialScale(0);

            var coords = (0, _getCoords2.default)(position || '', layerWidth, layerHeight, outerRadius * 2, outerRadius * 2);

            var color = (0, _colorFunc2.default)(colors);

            return _react2.default.createElement(
                'g',
                {
                    className: className,
                    style: style,
                    transform: 'translate(' + (coords.x + outerRadius) + ' ' + (coords.y + outerRadius) + ')',
                    opacity: opacity },
                (0, _map3.default)(series, function (series, index) {
                    var seriesVisible = props.seriesVisible,
                        seriesAttributes = props.seriesAttributes,
                        seriesStyle = props.seriesStyle;
                    var lineVisible = props.lineVisible,
                        lineStyle = props.lineStyle,
                        lineAttributes = props.lineAttributes,
                        lineWidth = props.lineWidth;


                    seriesVisible = (0, _value2.default)(seriesVisible, { seriesIndex: index, series: series, props: props });
                    if (!seriesVisible) {
                        return;
                    }

                    seriesAttributes = (0, _value2.default)(seriesAttributes, { seriesIndex: index, series: series, props: props });
                    seriesStyle = (0, _value2.default)(seriesStyle, { seriesIndex: index, series: series, props: props });

                    var linePath = void 0;
                    lineVisible = (0, _value2.default)(lineVisible, { seriesIndex: index, series: series, props: props });
                    if (lineVisible) {
                        var line = asAreas ? (0, _d3Shape.areaRadial)().innerRadius(function (point) {
                            return point.y0 ? radialScale(point.y0) : _radius0;
                        }).outerRadius(function (point) {
                            return radialScale(point.y);
                        }) : (0, _d3Shape.lineRadial)().radius(function (point) {
                            return radialScale(point.y);
                        });

                        var lineColor = series.color || color(index);

                        var curve = (0, _isString3.default)(props.interpolation) ? _curves2.default[props.interpolation] : props.interpolation;

                        line.angle(function (point) {
                            return circularScale(point.x);
                        }).defined(function (point) {
                            return (0, _isNumber3.default)(point.y);
                        }).curve(curve);

                        lineAttributes = (0, _value2.default)(lineAttributes, { seriesIndex: index, series: series, props: props });
                        lineStyle = (0, _value2.default)([series.style, lineStyle], { seriesIndex: index, series: series, props: props });
                        lineWidth = (0, _value2.default)(lineWidth, { seriesIndex: index, series: series, props: props });

                        linePath = _react2.default.createElement('path', _extends({
                            style: lineStyle,
                            fill: asAreas ? lineColor : 'transparent',
                            stroke: asAreas ? 'transparent' : lineColor,
                            strokeWidth: lineWidth,
                            d: line(series.data)
                        }, lineAttributes));
                    }

                    return _react2.default.createElement(
                        'g',
                        _extends({
                            key: index,
                            className: className && className + '-series ' + className + '-series-' + index,
                            style: seriesStyle,
                            opacity: series.opacity
                        }, seriesAttributes),
                        linePath
                    );
                })
            );
        }
    }]);

    return RadialLines;
}(_react.Component);

exports.default = RadialLines;


RadialLines.displayName = 'RadialLines';

RadialLines.propTypes = {
    className: _propTypes2.default.string,
    style: _propTypes2.default.object,
    scaleX: _propTypes2.default.object,
    scaleY: _propTypes2.default.object,
    minX: _propTypes2.default.number,
    maxX: _propTypes2.default.number,
    minY: _propTypes2.default.number,
    maxY: _propTypes2.default.number,
    layerWidth: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    layerHeight: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    seriesIndex: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.array, _propTypes2.default.func]),
    series: _propTypes2.default.arrayOf(_propTypes2.default.shape({
        name: _propTypes2.default.string,
        color: _propTypes2.default.string,
        opacity: _propTypes2.default.number,
        style: _propTypes2.default.object,
        data: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.arrayOf(_propTypes2.default.number), _propTypes2.default.shape({
            x: _propTypes2.default.number,
            y: _propTypes2.default.number
        })]))
    })),
    colors: _propTypes2.default.oneOfType([_propTypes2.default.oneOf(['category10', 'category20', 'category20b', 'category20c']), _propTypes2.default.arrayOf(_propTypes2.default.string), _propTypes2.default.func]),
    position: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.string]),

    opacity: _propTypes2.default.number,
    asAreas: _propTypes2.default.bool,
    innerRadius: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    startAngle: _propTypes2.default.number,
    endAngle: _propTypes2.default.number,
    interpolation: _propTypes2.default.oneOfType([_propTypes2.default.oneOf(['linear', 'linear-closed', 'step', 'step-before', 'step-after', 'basis', 'basis-open', 'basis-closed', 'bundle', 'cardinal', 'cardinal-open', 'cardinal-closed', 'monotone']), _propTypes2.default.func]),

    seriesVisible: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.func]),
    seriesAttributes: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
    seriesStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),

    lineVisible: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.func]),
    lineAttributes: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
    lineStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),

    lineWidth: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.func])
};

RadialLines.defaultProps = {
    colors: 'category20',
    seriesVisible: true,
    lineVisible: true,
    lineWidth: 3,
    startAngle: 0,
    endAngle: 2 * Math.PI,
    innerRadius: 0,
    position: 'center middle',
    interpolation: 'cardinal-closed'
};