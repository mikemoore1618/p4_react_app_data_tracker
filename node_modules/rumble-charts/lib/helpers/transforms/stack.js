'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _max2 = require('lodash/max');

var _max3 = _interopRequireDefault(_max2);

var _min2 = require('lodash/min');

var _min3 = _interopRequireDefault(_min2);

var _defaults2 = require('lodash/defaults');

var _defaults3 = _interopRequireDefault(_defaults2);

var _isUndefined2 = require('lodash/isUndefined');

var _isUndefined3 = _interopRequireDefault(_isUndefined2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

exports.default = stack;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stack(props, options) {
    var _ref = options || {},
        normalize = _ref.normalize;

    var series = props.series,
        seriesNormalized = props.seriesNormalized,
        maxX = props.maxX,
        maxY = props.maxY,
        minX = props.minX,
        minY = props.minY;


    var stackedY = [],
        lowestY = [];
    series = (0, _map3.default)(series, function (series) {

        var newSeries = {
            data: (0, _map3.default)(series.data, function (point, pointIndex) {
                stackedY[pointIndex] = stackedY[pointIndex] || 0;
                if ((0, _isUndefined3.default)(lowestY[pointIndex])) {
                    lowestY[pointIndex] = stackedY[pointIndex];
                }
                var newPoint = {
                    y0: stackedY[pointIndex],
                    y: stackedY[pointIndex] + point.y
                };
                stackedY[pointIndex] = newPoint.y;

                return (0, _defaults3.default)(newPoint, point);
            })
        };

        return (0, _defaults3.default)(newSeries, series);
    });

    minY = (0, _min3.default)(lowestY);
    var stackedMaxY = (0, _max3.default)(stackedY);
    maxY = Math.max(stackedMaxY, maxY);

    if (normalize) {

        var ratios = (0, _map3.default)(stackedY, function (y) {
            return stackedMaxY / y;
        });
        series = (0, _map3.default)(series, function (series) {
            var newSeries = {
                data: (0, _map3.default)(series.data, function (point, pointIndex) {
                    var newPoint = {
                        y0: point.y0 * ratios[pointIndex],
                        y: point.y * ratios[pointIndex]
                    };
                    return (0, _defaults3.default)(newPoint, point);
                })
            };
            return (0, _defaults3.default)(newSeries, series);
        });
    }

    return {
        series: series,
        seriesNormalized: seriesNormalized,
        maxX: maxX,
        maxY: maxY,
        minX: minX,
        minY: minY
    };
}