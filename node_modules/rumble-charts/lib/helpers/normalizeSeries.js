'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _omitBy2 = require('lodash/omitBy');

var _omitBy3 = _interopRequireDefault(_omitBy2);

var _isEmpty2 = require('lodash/isEmpty');

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _defaults2 = require('lodash/defaults');

var _defaults3 = _interopRequireDefault(_defaults2);

var _isArray2 = require('lodash/isArray');

var _isArray3 = _interopRequireDefault(_isArray2);

var _isNumber2 = require('lodash/isNumber');

var _isNumber3 = _interopRequireDefault(_isNumber2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _isUndefined2 = require('lodash/isUndefined');

var _isUndefined3 = _interopRequireDefault(_isUndefined2);

exports.default = normalizeSeries;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isInvalidLimit = function isInvalidLimit(value) {
    return (0, _isUndefined3.default)(value) || value === Infinity || value === -Infinity;
};

function normalizeSeries(props) {
    var maxX = -Infinity,
        maxY = -Infinity,
        minX = Infinity,
        minY = Infinity;

    var series = (0, _map3.default)(props.series, function (series) {

        var data = (0, _map3.default)(series.data, function (item, index) {

            var d = void 0;
            if (!props.seriesNormalized) {
                d = {};
                if ((0, _isNumber3.default)(item)) {
                    d.x = index;
                    d.y = item;
                } else if ((0, _isArray3.default)(item)) {
                    d.x = item[0];
                    d.y = item[1];
                } else {
                    d = item || {};
                    if ((0, _isUndefined3.default)(d.x)) {
                        d.x = index;
                    }
                }
            } else {
                d = item;
            }
            if ((0, _isUndefined3.default)(props.maxX)) {
                maxX = Math.max(maxX, d.x || 0);
            }
            if ((0, _isUndefined3.default)(props.maxY)) {
                maxY = Math.max(maxY, d.y || 0);
            }
            if ((0, _isUndefined3.default)(props.minX)) {
                minX = Math.min(minX, d.x || 0);
            }
            if ((0, _isUndefined3.default)(props.minY)) {
                minY = Math.min(minY, d.y || 0);
            }

            return d;
        });

        return (0, _defaults3.default)({ data: data }, series);
    });
    if ((0, _isEmpty3.default)(series)) {
        series = undefined;
    }
    if (!(0, _isUndefined3.default)(props.maxX)) {
        maxX = props.maxX;
    }
    if (!(0, _isUndefined3.default)(props.maxY)) {
        maxY = props.maxY;
    }
    if (!(0, _isUndefined3.default)(props.minX)) {
        minX = props.minX;
    }
    if (!(0, _isUndefined3.default)(props.minY)) {
        minY = props.minY;
    }

    return (0, _omitBy3.default)({
        seriesNormalized: true,
        series: series,
        maxX: maxX,
        maxY: maxY,
        minX: minX,
        minY: minY
    }, isInvalidLimit);
}