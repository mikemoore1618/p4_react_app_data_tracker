'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _normalizeNumber = require('./helpers/normalizeNumber');

var _normalizeNumber2 = _interopRequireDefault(_normalizeNumber);

var _getCoords3 = require('./helpers/getCoords');

var _getCoords4 = _interopRequireDefault(_getCoords3);

var _proxyChildren = require('./helpers/proxyChildren');

var _proxyChildren2 = _interopRequireDefault(_proxyChildren);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Creates a new layer using specific `width` and `height` at specific `position`. It's useful when
 * you have two or more graphics on the same chart. Or in case you to have a margins.
 *
 * @example ../docs/examples/Layer.md
 */
var Layer = function (_Component) {
    _inherits(Layer, _Component);

    function Layer(props) {
        _classCallCheck(this, Layer);

        var _this = _possibleConstructorReturn(this, (Layer.__proto__ || Object.getPrototypeOf(Layer)).call(this, props));

        _this.getWidth = _this.getWidth.bind(_this);
        _this.getHeight = _this.getHeight.bind(_this);
        _this.getCoords = _this.getCoords.bind(_this);
        return _this;
    }

    // helpers

    _createClass(Layer, [{
        key: 'getWidth',
        value: function getWidth() {
            var _props = this.props,
                width = _props.width,
                layerWidth = _props.layerWidth;

            return (0, _normalizeNumber2.default)(width, layerWidth);
        }
    }, {
        key: 'getHeight',
        value: function getHeight() {
            var _props2 = this.props,
                height = _props2.height,
                layerHeight = _props2.layerHeight;

            return (0, _normalizeNumber2.default)(height, layerHeight);
        }
    }, {
        key: 'getCoords',
        value: function getCoords() {
            var _props3 = this.props,
                position = _props3.position,
                layerWidth = _props3.layerWidth,
                layerHeight = _props3.layerHeight;

            return (0, _getCoords4.default)(position, layerWidth, layerHeight, this.getWidth(), this.getHeight());
        }

        // render

    }, {
        key: 'render',
        value: function render() {
            var _props4 = this.props,
                className = _props4.className,
                scaleX = _props4.scaleX,
                scaleY = _props4.scaleY,
                style = _props4.style;


            var layerWidth = this.getWidth();
            var layerHeight = this.getHeight();

            var _getCoords2 = this.getCoords(),
                x = _getCoords2.x,
                y = _getCoords2.y;

            var children = (0, _proxyChildren2.default)(this.props.children, this.props, {
                layerWidth: layerWidth,
                layerHeight: layerHeight,
                scaleX: scaleX,
                scaleY: scaleY
            });

            return _react2.default.createElement(
                'g',
                {
                    className: className,
                    transform: 'translate(' + x + ' ' + y + ')',
                    style: style },
                children
            );
        }
    }]);

    return Layer;
}(_react.Component);

exports.default = Layer;


Layer.displayName = 'Layer';

Layer.propTypes = {
    className: _propTypes2.default.string,
    style: _propTypes2.default.object,
    width: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    height: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    position: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.string]),
    series: _propTypes2.default.array,
    scaleX: _propTypes2.default.object,
    scaleY: _propTypes2.default.object,
    layerWidth: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    layerHeight: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    children: _propTypes2.default.node
};

Layer.defaultProps = {
    width: '100%',
    height: '100%',
    position: 'middle center'
};