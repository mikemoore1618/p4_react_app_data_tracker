'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _isNumber2 = require('lodash/isNumber');

var _isNumber3 = _interopRequireDefault(_isNumber2);

var _isString2 = require('lodash/isString');

var _isString3 = _interopRequireDefault(_isString2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = Lines;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _d3Shape = require('d3-shape');

var _curves = require('./helpers/curves');

var _curves2 = _interopRequireDefault(_curves);

var _value = require('./helpers/value');

var _value2 = _interopRequireDefault(_value);

var _colorFunc = require('./helpers/colorFunc');

var _colorFunc2 = _interopRequireDefault(_colorFunc);

var _propTypes3 = require('./helpers/propTypes');

var _propTypes4 = _interopRequireDefault(_propTypes3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Renders lines for your line chart.
 *
 * @example ../docs/examples/Lines.md
 */
function Lines(props) {
    var className = props.className,
        style = props.style,
        scaleX = props.scaleX,
        scaleY = props.scaleY,
        minY = props.minY,
        asAreas = props.asAreas,
        colors = props.colors,
        series = props.series,
        opacity = props.opacity;


    var rotate = scaleX.swap || scaleY.swap;

    var x = scaleX.factory(props);
    var y = scaleY.factory(props);

    var _y0 = y(minY || 0);
    var color = (0, _colorFunc2.default)(colors);

    return _react2.default.createElement(
        'g',
        { className: className, style: style, opacity: opacity },
        (0, _map3.default)(series, function (series, index) {
            var seriesVisible = props.seriesVisible,
                seriesStyle = props.seriesStyle,
                seriesAttributes = props.seriesAttributes;
            var lineVisible = props.lineVisible,
                lineStyle = props.lineStyle,
                lineAttributes = props.lineAttributes,
                lineWidth = props.lineWidth;


            seriesVisible = (0, _value2.default)(seriesVisible, { seriesIndex: index, series: series, props: props });
            if (!seriesVisible) {
                return;
            }

            seriesAttributes = (0, _value2.default)(seriesAttributes, { seriesIndex: index, series: series, props: props });
            seriesStyle = (0, _value2.default)(seriesStyle, { seriesIndex: index, series: series, props: props });

            var linePath = void 0;
            lineVisible = (0, _value2.default)(lineVisible, { seriesIndex: index, series: series, props: props });
            if (lineVisible) {
                var line = void 0;
                if (rotate) {
                    line = asAreas ? (0, _d3Shape.area)().x0(function (point) {
                        return point.y0 ? y(point.y0) : _y0;
                    }).x1(function (point) {
                        return y(point.y);
                    }) : (0, _d3Shape.line)().x(function (point) {
                        return y(point.y);
                    });

                    line.y(function (point) {
                        return x(point.x);
                    });
                } else {
                    line = asAreas ? (0, _d3Shape.area)().y0(function (point) {
                        return point.y0 ? y(point.y0) : _y0;
                    }).y1(function (point) {
                        return y(point.y);
                    }) : (0, _d3Shape.line)().y(function (point) {
                        return y(point.y);
                    });

                    line.x(function (point) {
                        return x(point.x);
                    });
                }

                var lineColor = series.color || color(index);

                var curve = (0, _isString3.default)(props.interpolation) ? _curves2.default[props.interpolation] : props.interpolation;

                line.defined(function (point) {
                    return (0, _isNumber3.default)(point.y);
                }).curve(curve);

                lineAttributes = (0, _value2.default)(lineAttributes, { seriesIndex: index, series: series, props: props });
                lineStyle = (0, _value2.default)([series.style, lineStyle], { seriesIndex: index, series: series, props: props });
                lineWidth = (0, _value2.default)(lineWidth, { seriesIndex: index, series: series, props: props });
                linePath = _react2.default.createElement('path', _extends({
                    style: lineStyle,
                    fill: asAreas ? lineColor : 'transparent',
                    stroke: asAreas ? 'transparent' : lineColor,
                    strokeWidth: lineWidth,
                    d: line(series.data)
                }, lineAttributes));
            }

            return _react2.default.createElement(
                'g',
                _extends({
                    key: index,
                    className: className && className + '-series ' + className + '-series-' + index,
                    style: seriesStyle,
                    opacity: series.opacity
                }, seriesAttributes),
                linePath
            );
        })
    );
}

Lines.displayName = 'Lines';

Lines.propTypes = {
    className: _propTypes2.default.string,
    style: _propTypes2.default.object,
    colors: _propTypes2.default.oneOfType([_propTypes2.default.oneOf(['category10', 'category20', 'category20b', 'category20c']), _propTypes2.default.arrayOf(_propTypes2.default.string), _propTypes2.default.func]),
    opacity: _propTypes2.default.number,

    asAreas: _propTypes2.default.bool,
    interpolation: _propTypes2.default.oneOfType([_propTypes2.default.oneOf(['linear', 'linear-closed', 'step', 'step-before', 'step-after', 'basis', 'basis-open', 'basis-closed', 'bundle', 'cardinal', 'cardinal-open', 'cardinal-closed', 'monotone']), _propTypes2.default.func]),

    seriesVisible: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.func]),
    seriesAttributes: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
    seriesStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),

    lineVisible: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.func]),
    lineAttributes: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
    lineStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),

    lineWidth: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.func]),

    scaleX: _propTypes2.default.object,
    scaleY: _propTypes2.default.object,
    minX: _propTypes2.default.number,
    maxX: _propTypes2.default.number,
    minY: _propTypes2.default.number,
    maxY: _propTypes2.default.number,
    seriesIndex: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.array, _propTypes2.default.func]),
    series: _propTypes4.default.series
};

Lines.defaultProps = {
    colors: 'category20',
    interpolation: 'monotone',
    seriesVisible: true,
    lineVisible: true,
    lineWidth: 3
};