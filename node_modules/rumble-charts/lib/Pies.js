'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _range2 = require('lodash/range');

var _range3 = _interopRequireDefault(_range2);

var _forEach2 = require('lodash/forEach');

var _forEach3 = _interopRequireDefault(_forEach2);

var _assign2 = require('lodash/assign');

var _assign3 = _interopRequireDefault(_assign2);

var _uniq2 = require('lodash/uniq');

var _uniq3 = _interopRequireDefault(_uniq2);

var _isArray2 = require('lodash/isArray');

var _isArray3 = _interopRequireDefault(_isArray2);

var _isEmpty2 = require('lodash/isEmpty');

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _d3Scale = require('d3-scale');

var _d3Shape = require('d3-shape');

var _d3Interpolate = require('d3-interpolate');

var _normalizeNumber = require('./helpers/normalizeNumber');

var _normalizeNumber2 = _interopRequireDefault(_normalizeNumber);

var _value = require('./helpers/value');

var _value2 = _interopRequireDefault(_value);

var _colorFunc = require('./helpers/colorFunc');

var _colorFunc2 = _interopRequireDefault(_colorFunc);

var _getCoords = require('./helpers/getCoords');

var _getCoords2 = _interopRequireDefault(_getCoords);

var _propTypes3 = require('./helpers/propTypes');

var _propTypes4 = _interopRequireDefault(_propTypes3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var maxAngle = 2 * Math.PI;

/**
 * Renders pies for you pie chart or donut chart
 *
 * @example ../docs/examples/Pies.md
 */

var Pies = function (_Component) {
    _inherits(Pies, _Component);

    function Pies(props) {
        _classCallCheck(this, Pies);

        var _this = _possibleConstructorReturn(this, (Pies.__proto__ || Object.getPrototypeOf(Pies)).call(this, props));

        _this.getInnerRadius = _this.getInnerRadius.bind(_this);
        _this.getPaddings = _this.getPaddings.bind(_this);
        _this.getPieWidth = _this.getPieWidth.bind(_this);
        _this.renderArc = _this.renderArc.bind(_this);
        return _this;
    }

    // helpers

    _createClass(Pies, [{
        key: 'getOuterRadius',
        value: function getOuterRadius(props) {
            return Math.min(props.layerWidth, props.layerHeight) / 2;
        }
    }, {
        key: 'getInnerRadius',
        value: function getInnerRadius(props) {
            return (0, _normalizeNumber2.default)(props.innerRadius, this.getOuterRadius(props));
        }
    }, {
        key: 'getPaddings',
        value: function getPaddings(props) {
            var innerPadding = props.innerPadding,
                groupPadding = props.groupPadding;

            var outerRadius = this.getOuterRadius(props);
            innerPadding = (0, _normalizeNumber2.default)(innerPadding, outerRadius) || 0;
            groupPadding = (0, _normalizeNumber2.default)(groupPadding, outerRadius) || 0;
            return {
                innerPadding: innerPadding,
                groupPadding: groupPadding
            };
        }
    }, {
        key: 'getPieWidth',
        value: function getPieWidth(x, props) {
            var pieWidth = props.pieWidth;

            var _getPaddings = this.getPaddings(props),
                innerPadding = _getPaddings.innerPadding,
                groupPadding = _getPaddings.groupPadding;

            if (pieWidth) {
                return (0, _normalizeNumber2.default)(pieWidth, this.getOuterRadius(props));
            } else {
                var baseWidth = Math.abs(x(1) - x(0));
                if (props.combined) {
                    return baseWidth - innerPadding;
                } else {
                    var seriesCount = (0, _isEmpty3.default)(props.series) ? 1 : props.series.length;
                    return (baseWidth - groupPadding) / seriesCount - innerPadding;
                }
            }
        }

        // render

    }, {
        key: 'renderArcPart',
        value: function renderArcPart(_ref) {
            var startAngle = _ref.startAngle,
                endAngle = _ref.endAngle,
                maxAngle = _ref.maxAngle,
                pathProps = _ref.pathProps,
                arc = _ref.arc,
                key = _ref.key;

            var pathList = [];
            var lapIndex = 0;
            while (endAngle >= 4 * Math.PI) {
                endAngle -= 2 * Math.PI;
                if (endAngle < startAngle) {
                    startAngle -= 2 * Math.PI;
                }
            }
            var lapsCount = Math.abs((endAngle - startAngle) / maxAngle);
            while (lapIndex < lapsCount) {

                var d = arc({
                    startAngle: startAngle,
                    endAngle: Math.min(startAngle + maxAngle, endAngle)
                });
                startAngle += maxAngle;

                pathList.push(_react2.default.createElement('path', _extends({
                    key: '' + key + lapIndex
                }, pathProps, {
                    d: d
                })));

                lapIndex++;
            }
            return pathList;
        }
    }, {
        key: 'renderArc',
        value: function renderArc(startAngle, endAngle, radius, pieWidth, seriesIndex, pointIndex, point) {
            var _this2 = this;

            var props = this.props;
            var className = props.className;
            var pieVisible = props.pieVisible,
                pieAttributes = props.pieAttributes,
                pieStyle = props.pieStyle,
                groupStyle = props.groupStyle,
                cornerRadius = props.cornerRadius;

            var series = props.series[seriesIndex];

            pieVisible = (0, _value2.default)(pieVisible, { seriesIndex: seriesIndex, pointIndex: pointIndex, point: point, series: series, props: props });
            if (!pieVisible) {
                return;
            }

            var halfWidth = pieWidth / 2;

            cornerRadius = (0, _value2.default)(cornerRadius, { seriesIndex: seriesIndex, pointIndex: pointIndex, point: point, series: series, props: props });

            var arc = (0, _d3Shape.arc)().cornerRadius((0, _normalizeNumber2.default)(cornerRadius, pieWidth)).padRadius(10).innerRadius(radius - halfWidth).outerRadius(radius + halfWidth);

            var fillColor = point.color || series.color || this.color(seriesIndex);
            if ((0, _isArray3.default)(fillColor) && (0, _uniq3.default)(fillColor).length === 1) {
                fillColor = fillColor[0];
            }

            pieStyle = (0, _value2.default)([point.style, series.style, pieStyle], {
                seriesIndex: seriesIndex,
                pointIndex: pointIndex,
                point: point,
                series: series,
                props: props
            });
            pieAttributes = (0, _value2.default)(pieAttributes, { seriesIndex: seriesIndex, pointIndex: pointIndex, point: point, series: series, props: props });

            var pathProps = (0, _assign3.default)({
                style: pieStyle,
                fill: fillColor,
                fillOpacity: point.opacity
            }, pieAttributes);

            var pathList = [];
            // fill color interpolation
            if ((0, _isArray3.default)(fillColor)) {

                var interpolateAngle = (0, _d3Interpolate.interpolate)(startAngle, endAngle);
                (0, _forEach3.default)(fillColor, function (color, index) {

                    if (index === fillColor.length - 1) {
                        return;
                    }

                    var interpolateFillColor = (0, _d3Interpolate.interpolate)(color, fillColor[index + 1]);
                    var step = 1 / ((endAngle - startAngle) / _this2.props.gradientStep);

                    (0, _forEach3.default)((0, _range3.default)(0, 1, step), function (i) {

                        pathProps.fill = interpolateFillColor(i);
                        var angleIndex = (index + i) / (fillColor.length - 1);
                        pathList = pathList.concat(_this2.renderArcPart({
                            startAngle: interpolateAngle(angleIndex),
                            endAngle: interpolateAngle(angleIndex + step),
                            maxAngle: maxAngle,
                            pathProps: pathProps,
                            arc: arc,
                            key: i
                        }));
                    });
                });
            } else {

                pathList = this.renderArcPart({
                    startAngle: startAngle,
                    endAngle: endAngle,
                    maxAngle: maxAngle,
                    pathProps: pathProps,
                    arc: arc,
                    key: pointIndex
                });
            }

            groupStyle = (0, _value2.default)(groupStyle, { seriesIndex: seriesIndex, pointIndex: pointIndex, point: point, series: series, props: props });

            return _react2.default.createElement(
                'g',
                {
                    key: pointIndex,
                    className: className && className + '-pie ' + className + '-pie-' + pointIndex,
                    style: groupStyle },
                pathList
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var props = this.props;
            var className = props.className,
                style = props.style,
                minX = props.minX,
                maxX = props.maxX,
                minY = props.minY,
                maxY = props.maxY,
                position = props.position,
                layerWidth = props.layerWidth,
                layerHeight = props.layerHeight,
                colors = props.colors,
                opacity = props.opacity;


            var innerRadius = this.getInnerRadius(props);
            var outerRadius = this.getOuterRadius(props);

            var radialScale = (0, _d3Scale.scaleLinear)().range([outerRadius, innerRadius]).domain(props.scaleX.direction >= 0 ? [minX - 0.5, maxX + 0.5] : [maxX + 0.5, minX - 0.5]);

            var circularScale = (0, _d3Scale.scaleLinear)().range([props.startAngle, props.endAngle]).domain(props.scaleY.direction >= 0 ? [minY, maxY] : [maxY, minY]);

            var series = props.series;

            var _getPaddings2 = this.getPaddings(props),
                innerPadding = _getPaddings2.innerPadding;

            var pieWidth = this.getPieWidth(radialScale, props);
            var _startAngle = circularScale(0);
            this.color = (0, _colorFunc2.default)(colors);

            var coords = (0, _getCoords2.default)(position || '', layerWidth, layerHeight, outerRadius * 2, outerRadius * 2);

            var halfPadAngle = props.padAngle / 2 || 0;

            return _react2.default.createElement(
                'g',
                {
                    className: className,
                    style: style,
                    transform: 'translate(' + (coords.x + outerRadius) + ' ' + (coords.y + outerRadius) + ')',
                    opacity: opacity },
                (0, _map3.default)(series, function (series, index) {
                    var seriesVisible = props.seriesVisible,
                        seriesAttributes = props.seriesAttributes,
                        seriesStyle = props.seriesStyle;


                    seriesVisible = (0, _value2.default)(seriesVisible, { seriesIndex: index, series: series, props: props });
                    if (!seriesVisible) {
                        return;
                    }

                    seriesAttributes = (0, _value2.default)(seriesAttributes, { seriesIndex: index, series: series, props: props });
                    seriesStyle = (0, _value2.default)(seriesStyle, { seriesIndex: index, series: series, props: props });

                    var deltaRadial = 0;
                    if (!props.combined) {
                        deltaRadial = pieWidth * index - (props.series.length - 1) * 0.5 * pieWidth + (index - (props.series.length - 1) / 2) * innerPadding;
                    }

                    return _react2.default.createElement(
                        'g',
                        _extends({
                            key: index,
                            className: className && className + '-series ' + className + '-series-' + index,
                            style: seriesStyle,
                            opacity: series.opacity
                        }, seriesAttributes),
                        (0, _map3.default)(series.data, function (point, pointIndex) {
                            var startAngle = (point.y0 ? circularScale(point.y0) : _startAngle) + halfPadAngle;
                            var endAngle = circularScale(point.y) - halfPadAngle;
                            var radius = radialScale(point.x) - deltaRadial * (props.scaleX.direction || 1);

                            return _this3.renderArc(startAngle, endAngle, radius, pieWidth, index, pointIndex, point);
                        })
                    );
                })
            );
        }
    }]);

    return Pies;
}(_react.Component);

exports.default = Pies;


Pies.displayName = 'Pies';

Pies.propTypes = {
    colors: _propTypes2.default.oneOfType([_propTypes2.default.oneOf(['category10', 'category20', 'category20b', 'category20c']), _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.string])), _propTypes2.default.func]),
    opacity: _propTypes2.default.number,
    style: _propTypes2.default.object,
    className: _propTypes2.default.string,
    position: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.string]),

    innerRadius: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    cornerRadius: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.func]),
    innerPadding: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    groupPadding: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    combined: _propTypes2.default.bool,
    startAngle: _propTypes2.default.number,
    endAngle: _propTypes2.default.number,
    padAngle: _propTypes2.default.number,
    gradientStep: _propTypes2.default.number,

    seriesVisible: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.func]),
    seriesAttributes: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
    seriesStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),

    groupStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),

    pieVisible: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.func]),
    pieAttributes: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
    pieStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),

    pieWidth: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

    seriesIndex: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.array, _propTypes2.default.func]),
    series: _propTypes4.default.series,
    minX: _propTypes2.default.number,
    maxX: _propTypes2.default.number,
    minY: _propTypes2.default.number,
    maxY: _propTypes2.default.number,
    layerWidth: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    layerHeight: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
};

Pies.defaultProps = {
    colors: 'category20',
    seriesVisible: true,
    pieVisible: true,
    startAngle: 0,
    endAngle: maxAngle,
    padAngle: 0,
    innerRadius: 0,
    cornerRadius: 0,
    groupPadding: 0,
    innerPadding: 0,
    position: 'center middle',
    gradientStep: 0.01
};