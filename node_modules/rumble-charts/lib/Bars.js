'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _value = require('./helpers/value');

var _value2 = _interopRequireDefault(_value);

var _normalizeNumber = require('./helpers/normalizeNumber');

var _normalizeNumber2 = _interopRequireDefault(_normalizeNumber);

var _colorFunc = require('./helpers/colorFunc');

var _colorFunc2 = _interopRequireDefault(_colorFunc);

var _propTypes3 = require('./helpers/propTypes');

var _propTypes4 = _interopRequireDefault(_propTypes3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Renders bars for your bar chart.
 *
 * @example ../docs/examples/Bars.md
 */
var Bars = function (_Component) {
    _inherits(Bars, _Component);

    function Bars(props) {
        _classCallCheck(this, Bars);

        var _this = _possibleConstructorReturn(this, (Bars.__proto__ || Object.getPrototypeOf(Bars)).call(this, props));

        _this.getPaddings = _this.getPaddings.bind(_this);
        _this.getBarWidth = _this.getBarWidth.bind(_this);

        _this.renderSeries = _this.renderSeries.bind(_this);
        _this.renderBar = _this.renderBar.bind(_this);
        return _this;
    }

    // helpers

    _createClass(Bars, [{
        key: 'getPaddings',
        value: function getPaddings() {
            var props = this.props;
            var innerPadding = props.innerPadding,
                groupPadding = props.groupPadding,
                layerWidth = props.layerWidth;

            innerPadding = (0, _value2.default)(innerPadding, props);
            innerPadding = (0, _normalizeNumber2.default)(innerPadding, layerWidth);
            groupPadding = (0, _value2.default)(groupPadding, props);
            groupPadding = (0, _normalizeNumber2.default)(groupPadding, layerWidth);
            return {
                innerPadding: innerPadding,
                groupPadding: groupPadding
            };
        }
    }, {
        key: 'getBarWidth',
        value: function getBarWidth() {
            var props = this.props,
                x = this.x;
            var barWidth = props.barWidth,
                layerWidth = props.layerWidth;

            var _getPaddings = this.getPaddings(props),
                innerPadding = _getPaddings.innerPadding,
                groupPadding = _getPaddings.groupPadding;

            if (barWidth) {
                barWidth = (0, _value2.default)(barWidth, props);
                return (0, _normalizeNumber2.default)(barWidth, layerWidth);
            } else {
                var baseWidth = Math.abs(x(1) - x(0));
                if (props.combined) {
                    return baseWidth - innerPadding;
                } else {
                    return (baseWidth - groupPadding) / (props.series || []).length - innerPadding;
                }
            }
        }

        // render

    }, {
        key: 'renderSeries',
        value: function renderSeries(series, index) {
            var _this2 = this;

            var x = this.x,
                y = this.y,
                barWidth = this.barWidth,
                props = this.props;
            var scaleX = props.scaleX,
                scaleY = props.scaleY,
                className = props.className;
            var seriesVisible = props.seriesVisible,
                seriesStyle = props.seriesStyle,
                seriesAttributes = props.seriesAttributes;


            seriesVisible = (0, _value2.default)(seriesVisible, { seriesIndex: index, series: series, props: props });
            if (!seriesVisible) {
                return;
            }

            seriesAttributes = (0, _value2.default)(seriesAttributes, { seriesIndex: index, series: series, props: props });
            seriesStyle = (0, _value2.default)(seriesStyle, { seriesIndex: index, series: series, props: props });

            var deltaX = 0;
            if (!props.combined) {
                deltaX = barWidth * index - (props.series.length - 1) * 0.5 * barWidth + (index - (props.series.length - 1) / 2) * this.innerPadding;
            }

            return _react2.default.createElement(
                'g',
                _extends({
                    key: index,
                    className: className && className + '-series ' + className + '-series-' + index,
                    opacity: series.opacity,
                    style: seriesStyle
                }, seriesAttributes),
                series && (0, _map3.default)(series.data, function (point, pointIndex) {
                    var y0 = point.y0 ? y(point.y0) : _this2._y0;
                    var y1 = y(point.y);
                    var x1 = x(point.x) + deltaX * (scaleX.direction || 1);

                    if (scaleX.swap || scaleY.swap) {
                        return _this2.renderBar(y1, x1, y0 - y1, barWidth, index, pointIndex, point);
                    } else {
                        return _this2.renderBar(x1, y1, barWidth, y0 - y1, index, pointIndex, point);
                    }
                })
            );
        }
    }, {
        key: 'renderBar',
        value: function renderBar(x, y, width, height, seriesIndex, pointIndex, point) {
            var props = this.props;
            var className = props.className,
                scaleX = props.scaleX,
                scaleY = props.scaleY;
            var barVisible = props.barVisible,
                barAttributes = props.barAttributes,
                barStyle = props.barStyle,
                groupStyle = props.groupStyle;

            var series = props.series[seriesIndex];

            barVisible = (0, _value2.default)(barVisible, { seriesIndex: seriesIndex, pointIndex: pointIndex, point: point, series: series, props: props });
            if (!barVisible) {
                return;
            }

            groupStyle = (0, _value2.default)(groupStyle, { seriesIndex: seriesIndex, pointIndex: pointIndex, point: point, series: series, props: props });

            var d = scaleX.swap || scaleY.swap ? 'M0,' + -height / 2 + ' h' + width + ' v' + height + ' h' + -width + ' Z' : 'M' + -width / 2 + ',0 v' + height + ' h' + width + ' v' + -height + ' Z';

            barAttributes = (0, _value2.default)(barAttributes, { seriesIndex: seriesIndex, pointIndex: pointIndex, point: point, series: series, props: props });
            barStyle = (0, _value2.default)([point.style, series.style, barStyle], {
                seriesIndex: seriesIndex, pointIndex: pointIndex, point: point, series: series, props: props
            });

            return _react2.default.createElement(
                'g',
                {
                    key: pointIndex,
                    className: className && className + '-bar ' + className + '-bar-' + pointIndex,
                    transform: 'translate(' + x + ' ' + y + ')',
                    style: groupStyle },
                _react2.default.createElement('path', _extends({
                    style: barStyle,
                    fill: point.color || series.color || this.color(seriesIndex),
                    fillOpacity: point.opacity,
                    d: d
                }, barAttributes))
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var props = this.props;
            var className = props.className,
                style = props.style,
                colors = props.colors,
                opacity = props.opacity;


            this.x = props.scaleX.factory(props);
            this.y = props.scaleY.factory(props);

            var domainX = this.x.domain();
            var naturalDirection = domainX[1] > domainX[0];
            if (domainX[0] === props.minX || domainX[0] === props.maxX) {
                this.x.domain([domainX[0] + (naturalDirection ? -0.5 : 0.5), domainX[1]]);
                domainX = this.x.domain();
            }
            if (domainX[1] === props.minX || domainX[1] === props.maxX) {
                this.x.domain([domainX[0], domainX[1] + (naturalDirection ? 0.5 : -0.5)]);
            }

            this.innerPadding = this.getPaddings().innerPadding;
            this.barWidth = this.getBarWidth();
            this._y0 = this.y(0);
            this.color = (0, _colorFunc2.default)(colors);

            return _react2.default.createElement(
                'g',
                {
                    className: className,
                    style: style,
                    opacity: opacity },
                (0, _map3.default)(props.series, this.renderSeries)
            );
        }
    }]);

    return Bars;
}(_react.Component);

exports.default = Bars;


Bars.displayName = 'Bars';

Bars.propTypes = {
    className: _propTypes2.default.string,
    /**
     * Colors
     */
    colors: _propTypes2.default.oneOfType([_propTypes2.default.oneOf(['category10', 'category20', 'category20b', 'category20c']), _propTypes2.default.arrayOf(_propTypes2.default.string), _propTypes2.default.func]),
    opacity: _propTypes2.default.number,
    style: _propTypes2.default.object,

    combined: _propTypes2.default.bool,
    groupPadding: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.func]),
    innerPadding: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.func]),

    seriesVisible: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.func]),
    seriesAttributes: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
    seriesStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),

    groupStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),

    barVisible: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.func]),
    barAttributes: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
    barStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),

    barWidth: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.func]),

    layerWidth: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    layerHeight: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    seriesIndex: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.array, _propTypes2.default.func]),
    series: _propTypes4.default.series,
    scaleX: _propTypes2.default.object,
    scaleY: _propTypes2.default.object,
    minX: _propTypes2.default.number,
    maxX: _propTypes2.default.number,
    minY: _propTypes2.default.number,
    maxY: _propTypes2.default.number
};

Bars.defaultProps = {
    groupPadding: 0,
    innerPadding: 0,
    colors: 'category20',
    seriesVisible: true,
    barVisible: true
};