'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _isUndefined2 = require('lodash/isUndefined');

var _isUndefined3 = _interopRequireDefault(_isUndefined2);

var _omitBy2 = require('lodash/omitBy');

var _omitBy3 = _interopRequireDefault(_omitBy2);

var _isFunction2 = require('lodash/isFunction');

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _isString2 = require('lodash/isString');

var _isString3 = _interopRequireDefault(_isString2);

var _pick2 = require('lodash/pick');

var _pick3 = _interopRequireDefault(_pick2);

var _assign2 = require('lodash/assign');

var _assign3 = _interopRequireDefault(_assign2);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _d3Timer = require('d3-timer');

var _d3Interpolate = require('d3-interpolate');

var _eases = require('./helpers/eases');

var _eases2 = _interopRequireDefault(_eases);

var _proxyChildren = require('./helpers/proxyChildren');

var _proxyChildren2 = _interopRequireDefault(_proxyChildren);

var _normalizeSeries = require('./helpers/normalizeSeries');

var _normalizeSeries2 = _interopRequireDefault(_normalizeSeries);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Animates (actually interpolates) your `series` data. Very useful when you want to have a simple transitions
 * between data state.
 *
 * As a wrapper it takes `series` obtained from its parent and gives it to its children.
 *
 * @example ../docs/examples/Animate.md
 */
var Animate = function (_Component) {
    _inherits(Animate, _Component);

    function Animate(props) {
        _classCallCheck(this, Animate);

        var _this = _possibleConstructorReturn(this, (Animate.__proto__ || Object.getPrototypeOf(Animate)).call(this, props));

        _this.state = (0, _assign3.default)({}, _this.props, (0, _normalizeSeries2.default)(_this.props));
        return _this;
    }

    // lifecycle

    _createClass(Animate, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var _this2 = this;

            var interpolate = (0, _d3Interpolate.interpolate)((0, _pick3.default)(this.state, this.props.interpolateProps), (0, _pick3.default)((0, _assign3.default)({}, nextProps, (0, _normalizeSeries2.default)(nextProps)), this.props.interpolateProps));

            var _props = this.props,
                duration = _props.duration,
                onStart = _props.onStart,
                onEnd = _props.onEnd,
                logFPS = _props.logFPS;
            var ease = this.props.ease;

            ease = (0, _isString3.default)(ease) ? _eases2.default[ease] : (0, _isFunction3.default)(ease) ? ease : _eases2.default['linear'];

            var i = 0;
            this._timer && this._timer.stop();
            onStart && onStart();
            var _timer = (0, _d3Timer.timer)(function (p) {
                i++;
                if (p >= duration) {
                    p = duration;
                    _this2.setState(interpolate(ease(p / duration)));

                    onEnd && onEnd();
                    if (logFPS) {
                        console.warn(i * (1000 / duration) + 'fps; ' + i + ' frames in ' + duration + 'ms');
                    }
                    _timer.stop();
                } else {
                    _this2.setState(interpolate(ease(p / duration)));
                }
            });
            this._timer = _timer;
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this._timer && this._timer.stop();
        }

        // render

    }, {
        key: 'render',
        value: function render() {
            var props = this.props,
                state = this.state;


            return _react2.default.createElement(
                'g',
                { className: props.className },
                (0, _proxyChildren2.default)(props.children, (0, _omitBy3.default)(state, _isUndefined3.default), {
                    layerWidth: state.layerWidth,
                    layerHeight: state.layerHeight,
                    scaleX: props.scaleX,
                    scaleY: props.scaleY
                })
            );
        }
    }]);

    return Animate;
}(_react.Component);

exports.default = Animate;


Animate.displayName = 'Animate';

Animate.propTypes = {
    /**
     * Simple
     */
    series: _propTypes2.default.array,
    interpolateProps: _propTypes2.default.arrayOf(_propTypes2.default.string),
    proxyProps: _propTypes2.default.arrayOf(_propTypes2.default.string),
    duration: _propTypes2.default.number,
    logFPS: _propTypes2.default.bool,
    ease: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.oneOf(['linear', 'poly', 'quad', 'cubic', 'sin', 'exp', 'circle', 'bounce', 'elastic', 'back', 'linear-in', 'poly-in', 'quad-in', 'cubic-in', 'sin-in', 'exp-in', 'circle-in', 'bounce-in', 'elastic-in', 'back-in', 'linear-out', 'poly-out', 'quad-out', 'cubic-out', 'sin-out', 'exp-out', 'circle-out', 'bounce-out', 'elastic-out', 'back-out', 'linear-in-out', 'poly-in-out', 'quad-in-out', 'cubic-in-out', 'sin-in-out', 'exp-in-out', 'circle-in-out', 'bounce-in-out', 'elastic-in-out', 'back-in-out', 'linear-out-in', 'poly-out-in', 'quad-out-in', 'cubic-out-in', 'sin-out-in', 'exp-out-in', 'circle-out-in', 'bounce-out-in', 'elastic-out-in', 'back-out-in'])]),
    onStart: _propTypes2.default.func,
    onEnd: _propTypes2.default.func
};

Animate.defaultProps = {
    interpolateProps: ['series', 'maxX', 'maxY', 'minX', 'minY', 'layerWidth', 'layerHeight'],
    proxyProps: ['seriesNormalized'],
    duration: 500,
    ease: 'linear'
};