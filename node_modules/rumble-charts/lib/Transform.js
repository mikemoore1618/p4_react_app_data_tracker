'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _isUndefined2 = require('lodash/isUndefined');

var _isUndefined3 = _interopRequireDefault(_isUndefined2);

exports.default = Transform;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _transform = require('./helpers/transform');

var _transform2 = _interopRequireDefault(_transform);

var _proxyChildren = require('./helpers/proxyChildren');

var _proxyChildren2 = _interopRequireDefault(_proxyChildren);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Transforms `series` data according chosen `method`.
 *
 * As a wrapper it takes `series` obtained from its parent and gives it to its children.
 *
 * @example ../docs/examples/Transform.md
 */
function Transform(props) {
    var className = props.className,
        layerWidth = props.layerWidth,
        layerHeight = props.layerHeight,
        scaleX = props.scaleX,
        scaleY = props.scaleY;


    var newProps = (0, _transform2.default)(props, props.method);

    var children = (0, _proxyChildren2.default)(props.children, newProps, {
        layerWidth: (0, _isUndefined3.default)(newProps.layerWidth) ? layerWidth : newProps.layerWidth,
        layerHeight: (0, _isUndefined3.default)(newProps.layerHeight) ? layerHeight : newProps.layerHeight,
        scaleX: (0, _isUndefined3.default)(newProps.scaleX) ? scaleX : newProps.scaleX,
        scaleY: (0, _isUndefined3.default)(newProps.scaleY) ? scaleY : newProps.scaleY
    });

    return _react2.default.createElement(
        'g',
        { className: className },
        children
    );
}

Transform.displayName = 'Transform';

Transform.propTypes = {
    className: _propTypes2.default.string,
    series: _propTypes2.default.array,
    /**
     * Possible string values: "`stack`", "`stackNormalized`", "`sort`", "`unstack`",
     * "`transpose`", "`rotate`", "`reverse`". Also you can define it as function that
     * receives props as an object, transforms it somehow and returns changes props as an object.
     */
    method: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func, _propTypes2.default.array]),
    scaleX: _propTypes2.default.object,
    scaleY: _propTypes2.default.object,
    layerWidth: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    layerHeight: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    children: _propTypes2.default.node
};