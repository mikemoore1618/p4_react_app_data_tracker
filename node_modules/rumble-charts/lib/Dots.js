'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _keys2 = require('lodash/keys');

var _keys3 = _interopRequireDefault(_keys2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _isArray2 = require('lodash/isArray');

var _isArray3 = _interopRequireDefault(_isArray2);

var _isFunction2 = require('lodash/isFunction');

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _isString2 = require('lodash/isString');

var _isString3 = _interopRequireDefault(_isString2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _d3Shape = require('d3-shape');

var _value = require('./helpers/value');

var _value2 = _interopRequireDefault(_value);

var _colorFunc = require('./helpers/colorFunc');

var _colorFunc2 = _interopRequireDefault(_colorFunc);

var _propTypes3 = require('./helpers/propTypes');

var _propTypes4 = _interopRequireDefault(_propTypes3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var symbolsMap = {
    'circle': _d3Shape.symbolCircle,
    'cross': _d3Shape.symbolCross,
    'diamond': _d3Shape.symbolDiamond,
    'square': _d3Shape.symbolSquare,
    'triangle-down': _d3Shape.symbolWye,
    'triangle-up': _d3Shape.symbolTriangle,
    'star': _d3Shape.symbolStar
};

var methods = {
    dots: 'renderCircle',
    dot: 'renderCircle',
    circles: 'renderCircle',
    circle: 'renderCircle',
    ellipses: 'renderEllipse',
    ellipse: 'renderEllipse',
    symbols: 'renderSymbol',
    symbol: 'renderSymbol',
    labels: 'renderLabel',
    label: 'renderLabel',
    path: 'renderPath'
};

/**
 * Renders dots for your scatter plot.
 *
 * @example ../docs/examples/Dots.md
 */

var Dots = function (_Component) {
    _inherits(Dots, _Component);

    function Dots(props) {
        _classCallCheck(this, Dots);

        var _this = _possibleConstructorReturn(this, (Dots.__proto__ || Object.getPrototypeOf(Dots)).call(this, props));

        _this.renderDot = _this.renderDot.bind(_this);
        return _this;
    }

    _createClass(Dots, [{
        key: 'renderCircle',
        value: function renderCircle(_ref) {
            var key = _ref.key,
                seriesIndex = _ref.seriesIndex,
                pointIndex = _ref.pointIndex,
                point = _ref.point,
                dotStyle = _ref.dotStyle,
                dotAttributes = _ref.dotAttributes,
                props = _ref.props,
                color = _ref.color;
            var className = props.className;
            var circleRadius = props.circleRadius,
                circleAttributes = props.circleAttributes;

            var series = props.series[seriesIndex];

            circleRadius = (0, _value2.default)(circleRadius, { seriesIndex: seriesIndex, pointIndex: pointIndex, point: point, series: series, props: props });
            circleAttributes = (0, _value2.default)(circleAttributes, { seriesIndex: seriesIndex, pointIndex: pointIndex, point: point, series: series, props: props });

            return _react2.default.createElement('circle', _extends({
                key: key,
                className: className && className + '-circle ' + className + '-circle-' + seriesIndex + '-' + pointIndex,
                cx: 0, cy: 0, r: circleRadius,
                style: dotStyle,
                fill: point.color || series.color || color(seriesIndex),
                fillOpacity: point.opacity
            }, dotAttributes, circleAttributes));
        }
    }, {
        key: 'renderEllipse',
        value: function renderEllipse(_ref2) {
            var key = _ref2.key,
                seriesIndex = _ref2.seriesIndex,
                pointIndex = _ref2.pointIndex,
                point = _ref2.point,
                dotStyle = _ref2.dotStyle,
                dotAttributes = _ref2.dotAttributes,
                props = _ref2.props,
                color = _ref2.color;
            var className = props.className;
            var ellipseRadiusX = props.ellipseRadiusX,
                ellipseRadiusY = props.ellipseRadiusY,
                ellipseAttributes = props.ellipseAttributes;

            var series = props.series[seriesIndex];

            ellipseRadiusX = (0, _value2.default)(ellipseRadiusX, { seriesIndex: seriesIndex, pointIndex: pointIndex, point: point, series: series, props: props });
            ellipseRadiusY = (0, _value2.default)(ellipseRadiusY, { seriesIndex: seriesIndex, pointIndex: pointIndex, point: point, series: series, props: props });
            ellipseAttributes = (0, _value2.default)(ellipseAttributes, { seriesIndex: seriesIndex, pointIndex: pointIndex, point: point, series: series, props: props });

            return _react2.default.createElement('ellipse', _extends({
                key: key,
                className: className && className + '-ellipse ' + className + '-ellipse-' + seriesIndex + '-' + pointIndex,
                cx: 0,
                cy: 0,
                rx: ellipseRadiusX,
                ry: ellipseRadiusY,
                style: dotStyle,
                fill: point.color || series.color || color(seriesIndex),
                fillOpacity: point.opacity
            }, dotAttributes, ellipseAttributes));
        }
    }, {
        key: 'renderPath',
        value: function renderPath(_ref3) {
            var key = _ref3.key,
                seriesIndex = _ref3.seriesIndex,
                pointIndex = _ref3.pointIndex,
                point = _ref3.point,
                dotStyle = _ref3.dotStyle,
                dotAttributes = _ref3.dotAttributes,
                props = _ref3.props,
                color = _ref3.color;
            var className = props.className;
            var path = props.path,
                pathAttributes = props.pathAttributes;

            var series = props.series[seriesIndex];

            path = (0, _value2.default)(path, { seriesIndex: seriesIndex, pointIndex: pointIndex, point: point, series: series, props: props });
            pathAttributes = (0, _value2.default)(pathAttributes, { seriesIndex: seriesIndex, pointIndex: pointIndex, point: point, series: series, props: props });

            return _react2.default.createElement('path', _extends({
                key: key,
                className: className && className + '-path ' + className + '-path-' + seriesIndex + '-' + pointIndex,
                d: path,
                style: dotStyle,
                fill: point.color || series.color || color(seriesIndex),
                fillOpacity: point.opacity
            }, dotAttributes, pathAttributes));
        }
    }, {
        key: 'renderSymbol',
        value: function renderSymbol(_ref4) {
            var key = _ref4.key,
                seriesIndex = _ref4.seriesIndex,
                pointIndex = _ref4.pointIndex,
                point = _ref4.point,
                dotStyle = _ref4.dotStyle,
                dotAttributes = _ref4.dotAttributes,
                props = _ref4.props,
                color = _ref4.color;
            var className = props.className;
            var symbolType = props.symbolType,
                symbolAttributes = props.symbolAttributes;

            var series = props.series[seriesIndex];

            symbolType = (0, _value2.default)(symbolType, { seriesIndex: seriesIndex, pointIndex: pointIndex, point: point, series: series, props: props });
            symbolAttributes = (0, _value2.default)(symbolAttributes, { seriesIndex: seriesIndex, pointIndex: pointIndex, point: point, series: series, props: props });

            var type = (0, _isString3.default)(symbolType) ? symbolsMap[symbolType] : symbolType;

            return _react2.default.createElement('path', _extends({
                key: key,
                className: className && className + '-symbol ' + className + '-symbol-' + seriesIndex + '-' + pointIndex,
                d: (0, _d3Shape.symbol)().type(type)(point, pointIndex),
                style: dotStyle,
                fill: point.color || series.color || color(seriesIndex),
                fillOpacity: point.opacity
            }, dotAttributes, symbolAttributes));
        }
    }, {
        key: 'renderLabel',
        value: function renderLabel(_ref5) {
            var key = _ref5.key,
                seriesIndex = _ref5.seriesIndex,
                pointIndex = _ref5.pointIndex,
                point = _ref5.point,
                dotStyle = _ref5.dotStyle,
                dotAttributes = _ref5.dotAttributes,
                props = _ref5.props,
                color = _ref5.color;
            var className = props.className;
            var label = props.label,
                labelAttributes = props.labelAttributes;

            var series = props.series[seriesIndex];

            label = (0, _value2.default)(label, { seriesIndex: seriesIndex, pointIndex: pointIndex, point: point, series: series, props: props });
            labelAttributes = (0, _value2.default)(labelAttributes, { seriesIndex: seriesIndex, pointIndex: pointIndex, point: point, series: series, props: props });

            return _react2.default.createElement(
                'text',
                _extends({
                    key: key,
                    className: className && className + '-label ' + className + '-label-' + seriesIndex + '-' + pointIndex,
                    style: dotStyle,
                    fill: point.color || series.color || color(seriesIndex),
                    fillOpacity: point.opacity
                }, dotAttributes, labelAttributes),
                label
            );
        }
    }, {
        key: 'renderDot',
        value: function renderDot(x, y, seriesIndex, pointIndex, point) {
            var _this2 = this;

            var props = this.props;
            var className = props.className;
            var groupStyle = props.groupStyle,
                dotVisible = props.dotVisible,
                dotAttributes = props.dotAttributes,
                dotStyle = props.dotStyle,
                dotType = props.dotType,
                dotRender = props.dotRender;

            var series = props.series[seriesIndex];

            dotVisible = (0, _value2.default)(dotVisible, { seriesIndex: seriesIndex, pointIndex: pointIndex, point: point, series: series, props: props });
            if (!dotVisible) {
                return;
            }

            groupStyle = (0, _value2.default)(groupStyle, { seriesIndex: seriesIndex, pointIndex: pointIndex, point: point, series: series, props: props });

            dotType = (0, _value2.default)([dotType], { seriesIndex: seriesIndex, pointIndex: pointIndex, point: point, series: series, props: props });
            dotAttributes = (0, _value2.default)(dotAttributes, { seriesIndex: seriesIndex, pointIndex: pointIndex, point: point, dotType: dotType, series: series, props: props });
            dotStyle = (0, _value2.default)([point.style, series.style, dotStyle], {
                seriesIndex: seriesIndex,
                pointIndex: pointIndex,
                point: point,
                dotType: dotType,
                series: series,
                props: props
            });

            var color = this.color;
            var dot = void 0;

            if ((0, _isFunction3.default)(dotRender)) {
                dot = dotRender({ seriesIndex: seriesIndex, pointIndex: pointIndex, point: point, dotStyle: dotStyle, dotAttributes: dotAttributes, props: props, color: color });
            } else {
                if ((0, _isString3.default)(dotType)) {
                    dot = this[methods[dotType]] && this[methods[dotType]]({
                        seriesIndex: seriesIndex, pointIndex: pointIndex, point: point,
                        dotStyle: dotStyle, dotAttributes: dotAttributes, props: props, color: color
                    });
                } else if ((0, _isArray3.default)(dotType)) {
                    dot = (0, _map3.default)(dotType, function (dotType, key) {
                        return _this2[methods[dotType]]({
                            key: key, seriesIndex: seriesIndex, pointIndex: pointIndex, point: point, dotStyle: dotStyle, dotAttributes: dotAttributes, props: props, color: color
                        });
                    });
                } else {
                    dot = null;
                }
            }

            return _react2.default.createElement(
                'g',
                {
                    key: pointIndex,
                    className: className && className + '-dot ' + className + '-dot-' + pointIndex,
                    transform: 'translate(' + x + ' ' + y + ')',
                    style: groupStyle },
                dot
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var props = this.props;
            var className = props.className,
                style = props.style,
                scaleX = props.scaleX,
                scaleY = props.scaleY,
                colors = props.colors,
                opacity = props.opacity;


            var x = scaleX.factory(props);
            var y = scaleY.factory(props);
            var rotate = scaleX.swap || scaleY.swap;
            this.color = (0, _colorFunc2.default)(colors);

            return _react2.default.createElement(
                'g',
                { className: className, style: style, opacity: opacity },
                (0, _map3.default)(props.series, function (series, index) {
                    var seriesVisible = props.seriesVisible,
                        seriesStyle = props.seriesStyle,
                        seriesAttributes = props.seriesAttributes;


                    seriesVisible = (0, _value2.default)(seriesVisible, { seriesIndex: index, series: series, props: props });
                    if (!seriesVisible) {
                        return;
                    }

                    seriesAttributes = (0, _value2.default)(seriesAttributes, { seriesIndex: index, series: series, props: props });
                    seriesStyle = (0, _value2.default)(seriesStyle, { seriesIndex: index, series: series, props: props });

                    return _react2.default.createElement(
                        'g',
                        _extends({
                            key: index,
                            className: className && className + '-series ' + className + '-series-' + index,
                            style: seriesStyle,
                            opacity: series.opacity
                        }, seriesAttributes),
                        (0, _map3.default)(series.data, function (point, pointIndex) {
                            var y1 = y(point.y);
                            var x1 = x(point.x);

                            if (rotate) {
                                return _this3.renderDot(y1, x1, index, pointIndex, point);
                            } else {
                                return _this3.renderDot(x1, y1, index, pointIndex, point);
                            }
                        })
                    );
                })
            );
        }
    }]);

    return Dots;
}(_react.Component);

exports.default = Dots;


Dots.displayName = 'Dots';

Dots.propTypes = {
    className: _propTypes2.default.string,
    colors: _propTypes2.default.oneOfType([_propTypes2.default.oneOf(['category10', 'category20', 'category20b', 'category20c']), _propTypes2.default.arrayOf(_propTypes2.default.string), _propTypes2.default.func]),
    opacity: _propTypes2.default.number,
    style: _propTypes2.default.object,

    /**
     * Possible values: `"dot"`, `"circle"`, `"ellipse"`, `"symbol"`, `"label"`, `"path"`.
     */
    dotType: _propTypes2.default.oneOfType([_propTypes2.default.oneOf((0, _keys3.default)(methods)), _propTypes2.default.array, _propTypes2.default.func]),
    dotRender: _propTypes2.default.func,

    circleRadius: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.func]),
    circleAttributes: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),

    ellipseRadiusX: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.func]),
    ellipseRadiusY: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.func]),
    ellipseAttributes: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),

    /**
     * Possible values: `"circle"`, `"cross"`, `"diamond"`, `"square"`,
     * `"triangle-down"`, `"triangle-up"`
     */
    symbolType: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func, _propTypes2.default.object]),
    symbolAttributes: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),

    label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
    labelAttributes: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),

    path: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
    pathAttributes: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),

    seriesVisible: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.func]),
    seriesAttributes: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
    seriesStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),

    groupStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),

    dotVisible: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.func]),
    dotAttributes: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
    dotStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),

    seriesIndex: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.array, _propTypes2.default.func]),
    series: _propTypes4.default.series,
    scaleX: _propTypes2.default.object,
    scaleY: _propTypes2.default.object
};

Dots.defaultProps = {
    colors: 'category20',
    dotType: 'circles',
    circleRadius: 4,
    ellipseRadiusX: 6,
    ellipseRadiusY: 4,
    seriesVisible: true,
    dotVisible: true
};